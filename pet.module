<?php

function pet_menu() {
  $items = [];
  $items['pets'] = [
    'page callback' => 'pet_page_view',
    'access callback' => TRUE
  ];
  $items['api/pets'] = [
    'page callback' => 'pet_page_api',
    'access callback' => TRUE,
    'delivery callback' => 'drupal_json_output'
  ];
  $items['api/delete-post'] = [
    'page callback' => 'delete_post',
    'access callback' => TRUE,
    'delivery callback' => 'drupal_json_output'
  ];
  return $items;
}

function pet_page_view() {
  $filters = pet_get_filters();
  $element = array(
    '#type' => 'markup',
    '#markup' => '<script type="text/javascript">window.filters = ' . drupal_json_encode($filters) . '</script>',
  );
  drupal_add_html_head($element, 'filter-json');
  $element = array(
    '#type' => 'markup',
    '#markup' => '<script type="text/javascript">window.basepath = "/pets";</script>',
  );
  // drupal_add_html_head($element, 'basepath-url');
  $module_path = drupal_get_path('module', 'pet');
  drupal_add_js($module_path . '/theme/js/dist/bundle.js', ['type' => 'file', 'group' => 'theme', 'scope' => 'footer']);
  drupal_add_css($module_path . '/theme/js/src/style.css', ['type' => 'file', 'group' => 'theme']);
  return [
    '#theme' => 'html_tag',
    '#tag' => 'div',
    '#value' => ' ',
    '#attributes' => [
       'id' => 'root'
     ]
  ];
}

function pet_get_filters() {
  return [
    'search' => [
      'type' => 'search',
      'placeholder' => 'Filter by Keyword'
    ],
    'first' => [
      'type' => 'select',
      'options' => pet_taxonomy_to_options_category(1),
      'placeholder' => 'Select Category',
    ],
    'second' => [
      'type' => 'select',
      'options' => pet_taxonomy_to_options_category(1),
      'placeholder' => 'Select Category',
    ],
    'third' => [
      'type' => 'select',
      'options' => pet_taxonomy_to_options_category(1),
      'placeholder' => 'Select Category',
    ],
  ];
}

function pet_taxonomy_to_options_category($vid) {
  $output = [];
  $tree = taxonomy_get_tree($vid);
  foreach ($tree AS $term) {
    $output[] = ['id' => (string) $term->tid, 'text' => $term->name];
  }
  return $output;
}

function pet_page_api() {
  $build = ['result' => []];
  $nids = pet_query($_GET);
  $entities = node_load_multiple($nids['result']);
  foreach ($entities AS $entity) {
    $build['result'][] = ['id' => $entity->nid, 
      'title' => $entity->title, 
      'image' => file_create_url($entity->field_image['und'][0]['uri']),
      'deleted' => FALSE,
      'tid' => $entity->field_category['und'][0]['tid'],
    ];
  }
  
  $build['total'] = $nids['count'];
  $build['page'] = !empty($_GET['page']) ? $_GET['page'] : 0;
  return $build;
}

function pet_query(array $params) {
  $query = db_select('node', 'n');
  $query->addField('n', 'nid', 'nid');
  $query->join('field_data_field_image', 'i','i.entity_id = n.nid');
  foreach($params AS $key => $value) {
    switch($key) {
      case 'search':
        $query->condition('n.title', '%' . $value . '%', 'LIKE');
        break;
    }
  }
  $query->condition('status', 1);
  $query->groupBy('n.nid');
  $count_query = clone $query;
  $count = ceil($count_query->execute()->rowCount() / 9);
  $query->range($_GET['page'] * 9, 9);
  return ['count' => $count, 'result' => $query->execute()->fetchCol()];
}

function delete_post() {
  //required headers
  header("Access-Control-Allow-Origin: *");
  header("Content-Type: application/json; charset=UTF-8");
  header("Access-Control-Allow-Credentials : true");
  if (empty($_POST['id'])) {
    echo json_encode(
      array("message"=>"Unable to delete product.")
    ); 
    exit;
  }
  $query = db_delete('node')
    ->condition('nid', $_POST['id'], '=');
  $result = $query->execute();
}
